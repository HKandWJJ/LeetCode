package TP0011_maxArea;

/**
 * 盛最多水的容器:
 * 给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。
 * 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
 * 返回容器可以储存的最大水量。
 * ************************************************************************************
 * 思路总结:
 * 1. 双指针法:
 *  1.1 定义两个指针, 分别指向数组的头和尾
 *  1.2 计算当前指针所指的两条线与x轴所围成的面积
 *  1.3 比较当前面积与最大面积, 如果当前面积更大, 则更新最大面积
 *  1.4 如果左指针所指的线的高度小于右指针所指的线的高度, 则左指针右移
 *  1.5 如果右指针所指的线的高度小于左指针所指的线的高度, 则右指针左移
 *  1.6 重复步骤2-5, 直到左指针等于右指针
 *  1.7 返回最大面积
 *  ********************************************************************************
 * 2. 时间复杂度: O(n)
 * 3. 空间复杂度: O(1)
 */
class solution{
    public int maxArea(int[] height){
        int l = 0, r = height.length - 1;
        int ans = 0;
        while(l < r){
            int area = Math.min(height[l], height[r]) * (r - l);
            ans = Math.max(ans, area);
            if(height[l] < height[r]){
                ++l;
            }else{
                --r;
            }
        }
        return ans;
    }
}
