package MDP0064_minPathSum;

/**
 * 最小路径和:给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
 * ********************************************************************************************
 * 思路总结:
 * 初始化第一行和第一列：因为在第一行和第一列的任何位置，只能从上方或者左方的位置到达，所以第一行和第一列的每个位置的路径和都为其上方或左方位置的路径和加上当前位置的数字。
 * 动态规划更新：对于其他位置 (i, j)，可以从上方的位置 (i - 1, j) 或者左方的位置 (i, j - 1) 到达。
 * 因此，到达位置 (i, j) 的最小路径和等于到达位置 (i - 1, j) 和到达位置 (i, j - 1) 的最小路径和中的较小值加上当前位置的数字。
 * 最终，数组 dp 的最后一个元素 dp[m - 1][n - 1] 即为从左上角到右下角的最小路径和。
 * ********************************************************************************************
 * 时间复杂度：O(m * n)，其中 m 和 n 分别是网格的行数和列数。需要遍历整个网格来计算每个位置的最小路径和。
 * 空间复杂度：O(m * n)，需要使用一个二维数组 dp 来存储每个位置的最小路径和。
 */
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int rows = grid.length, columns = grid[0].length;
        int[][] dp = new int[rows][columns];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < rows; i++){
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }
        for(int j = 1; j < columns; j++){
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }
        for(int i = 1; i < rows; i++){
            for(int j = 1; j < columns; j++){
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        return dp[rows - 1][columns - 1];
    }
}
