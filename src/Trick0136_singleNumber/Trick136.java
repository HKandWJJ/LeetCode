package Trick0136_singleNumber;

/**
 * 只出现一次的数字:给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 * *******************************************************************************************
 * 思路总结:
 * 1. 异或运算满足交换律和结合律, a^b^a=a^a^b=b^0=b
 * 2. 任何数和0做异或运算，结果仍然是原来的数, a^0=a
 * 3. 任何数和其自身做异或运算，结果是0, a^a=0
 * *******************************************************************************************
 * 时间复杂度:O(n)
 * 空间复杂度:O(1)
 */
class Solution {
    public int singleNumber(int[] nums) {
        int single = 0;
        for(int num : nums){
            single ^= num;
        }
        return single;
    }
}
